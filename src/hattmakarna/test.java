/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hattmakarna;

import oru.inf.InfDB; 
import oru.inf.InfException; 
import javax.swing.JOptionPane;
import java.awt.*;
/**
 *
 * @author helinakravi
 */
public class LäggTillNyKund extends javax.swing.JFrame {
 
    private static InfDB idb; 
    private String inloggadAnvandare;
    private Validering validera;



public LäggTillNyKund(InfDB idb, String inloggadAnvandare) {
    
    initComponents();
    this.idb = idb;
    this.inloggadAnvandare = inloggadAnvandare;
    initListeners();
    }

private void initListeners(){
    
    btnSpara.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
    sparaKund();
    }
});
    
// Kod för tillbaka-knappen som skickar användaren till huvudmenyn.
btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
    new HuvudMeny(idb, inloggadAnvandare).setVisible(true);
    setVisible(false);
    } 
    
});  
}

//skyddar mot sql-injektion, genom att byta ut ' mot två'' (så att databasen inte tror att man avslutar koden tex)
private void sparaKund() {
String telefonNummer = (txtTelefonNr.getText());
String fakturaAdress = (txtFakturaAdress.getText()); 
String leveransAdress=(TxtLeveransAdress.getText());
String postNummer = (txtPostNr.getText());
String ort = (txtOrt.getText());
String förnamn = (txtFornamn.getText());
String efternamn = (TxtEfternamn.getText());
String epost = (TxtEpost.getText());


//felmedelande som dyker upp ifall en ruta inte fylls i, går ej att spara då 

    if (!Validering.faltInteTomt(förnamn) || !Validering.faltInteTomt(efternamn) ||
        !Validering.faltInteTomt(epost) || !Validering.faltInteTomt(telefonNummer) ||
        !Validering.faltInteTomt(fakturaAdress) || !Validering.faltInteTomt(postNummer) ||
        !Validering.faltInteTomt(ort) || !Validering.faltInteTomt(leveransAdress)) {
        
        JOptionPane.showMessageDialog(this, "Alla fält måste fyllas i!", "Fel", JOptionPane.ERROR_MESSAGE);
        return;
        }

    if (!Validering.arEndastBokstaver(förnamn)) {
        JOptionPane.showMessageDialog(this, "Förnamn får endast innehålla bokstäver","Fel",  JOptionPane.ERROR_MESSAGE);
        return;
        }
        
    if (!Validering.arEndastBokstaver(efternamn)) {
        JOptionPane.showMessageDialog(this, "Efternamn får endast innehålla bokstäver", "Fel", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
    if (!Validering.valideringEmail(epost)) {
        JOptionPane.showMessageDialog(this, "Ogiltig e-postadress", "Fel", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
    if (!Validering.valideringTelefon(telefonNummer)) {
        JOptionPane.showMessageDialog(this, "Telefonnummer måste ha formatet XXX-XXX-XXXX och enbart siffror", "Fel", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
    if (!Validering.arEndastSiffror(postNummer)) {
        JOptionPane.showMessageDialog(this, "Postnummer får endast innehålla siffror", "Fel", JOptionPane.ERROR_MESSAGE);
        return;
        }

    
    try {
    String fraga = "INSERT INTO Kund (fornamn, efternamn, epost, telefonnummer, leveransadress, fakturaadress, postnummer, ort) " +
    "VALUES ('" + förnamn + "', '" + efternamn + "', '" + epost + "', '" + telefonNummer + "', '" + leveransAdress + "', '" + fakturaAdress + "', '" + postNummer + "', '" + ort + "')";
        
//kör sql-frågan och ser till att spara datan i databasen
    idb.insert(fraga);
    JOptionPane.showMessageDialog(this, "Kunddata har sparats!");
    }

//om något går fel visas detta felmeddelande
    catch (InfException ex) {
    JOptionPane.showMessageDialog(this, "Fel vid sparning till databas: " + ex.getMessage(), "Fel", JOptionPane.ERROR_MESSAGE);  
     }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jButton1)
                .addContainerGap(257, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jButton1)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
