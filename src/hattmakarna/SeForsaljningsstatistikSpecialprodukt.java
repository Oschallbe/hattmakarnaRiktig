/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hattmakarna;

import java.util.HashMap;
import java.util.List;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.SqlDateModel;
import java.util.Properties;

/**
 *
 * @author Adam
 */
public class SeForsaljningsstatistikSpecialprodukt extends javax.swing.JPanel {

    private InfDB idb;
    private String inloggadAnvandare;
    private JDatePickerImpl datePickerFran;
    private JDatePickerImpl datePickerTill;

    /**
     * Creates new form SeForsaljningsstatistik
     */
    public SeForsaljningsstatistikSpecialprodukt(InfDB idb, String ePost) {
        initComponents();
        Properties p = new Properties();
        p.put("text.today", "Idag");
        p.put("text.month", "Månad");
        p.put("text.year", "År");

        SqlDateModel modelFran = new SqlDateModel();
        JDatePanelImpl datePanelFran = new JDatePanelImpl(modelFran, p);
        datePickerFran = new JDatePickerImpl(datePanelFran, new org.jdatepicker.impl.DateComponentFormatter());

        SqlDateModel modelTill = new SqlDateModel();
        JDatePanelImpl datePanelTill = new JDatePanelImpl(modelTill, p);
        datePickerTill = new JDatePickerImpl(datePanelTill, new org.jdatepicker.impl.DateComponentFormatter());

        // Lägg till date pickers i respektive JPanel
        panDatumFran.setLayout(new java.awt.BorderLayout());
        panDatumFran.add(datePickerFran, java.awt.BorderLayout.CENTER);

        panDatumTill.setLayout(new java.awt.BorderLayout());
        panDatumTill.add(datePickerTill, java.awt.BorderLayout.CENTER);

        this.idb = idb;
        this.inloggadAnvandare = ePost;

        visaLevereradeStandardhattar();
    }

    private void visaLevereradeStandardhattar() {
        try {
            String fraga = "SELECT sp.SpecialProduktID AS ID, sp.Pris AS Pris, oi.AntalProdukter AS Antal, b.Datum AS Datum "
                    + "FROM OrderItem oi "
                    + "JOIN Bestallning b ON oi.BestallningID = b.BestallningID "
                    + "JOIN SpecialProdukt sp ON oi.SpecialProduktID = sp.SpecialProduktID "
                    + "WHERE b.Status = 'Levererad'";

            List<HashMap<String, String>> resultat = idb.fetchRows(fraga);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Rensa gamla rader

            if (resultat != null) {
                for (HashMap<String, String> rad : resultat) {
                    model.addRow(new Object[]{
                        rad.get("SpecialProduktID"),
                        rad.get("Pris"),
                        rad.get("AntalProdukter"),
                        rad.get("Datum")
                    });
                }
            } else {
                System.out.println("Inga levererade specialhattar hittades.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Kunde inte hämta statistik:" + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtHatt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnFiltrera = new javax.swing.JButton();
        btnSummera = new javax.swing.JButton();
        panDatumFran = new javax.swing.JPanel();
        panDatumTill = new javax.swing.JPanel();
        btnRensa = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Försäljningsstatistik Specialprodukter");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "ID", "Pris", "Antal", "Datum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Filtrera efter ID");

        txtHatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHattActionPerformed(evt);
            }
        });

        jLabel3.setText("Filtrera efter datum");

        jLabel4.setText("Från:");

        jLabel5.setText("Till:");

        btnFiltrera.setText("Filtrera");
        btnFiltrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltreraActionPerformed(evt);
            }
        });

        btnSummera.setText("Summera");
        btnSummera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSummeraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panDatumFranLayout = new javax.swing.GroupLayout(panDatumFran);
        panDatumFran.setLayout(panDatumFranLayout);
        panDatumFranLayout.setHorizontalGroup(
            panDatumFranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panDatumFranLayout.setVerticalGroup(
            panDatumFranLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panDatumTillLayout = new javax.swing.GroupLayout(panDatumTill);
        panDatumTill.setLayout(panDatumTillLayout);
        panDatumTillLayout.setHorizontalGroup(
            panDatumTillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panDatumTillLayout.setVerticalGroup(
            panDatumTillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnRensa.setText("Rensa filtrering");
        btnRensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtHatt, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(panDatumFran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panDatumTill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(btnSummera))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(134, 134, 134)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFiltrera))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnRensa))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1)
                        .addGap(68, 68, 68)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panDatumFran, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panDatumTill, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRensa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtHatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFiltrera)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSummera)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtHattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHattActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHattActionPerformed

    private void btnSummeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSummeraActionPerformed
        String input = txtHatt.getText().trim();
        Integer ID = null;

        // Försök tolka ID om användaren har skrivit något
        if (!input.isEmpty()) {
            try {
                ID = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID måste vara ett heltal.");
                return;
            }
        }

        java.sql.Date fran = (java.sql.Date) datePickerFran.getModel().getValue();
        java.sql.Date till = (java.sql.Date) datePickerTill.getModel().getValue();

        try {
            String fraga = "SELECT sp.SpecialProduktID AS ID, sp.Pris AS Pris, oi.AntalProdukter AS Antal, b.Datum AS Datum "
                    + "FROM OrderItem oi "
                    + "JOIN Bestallning b ON oi.BestallningID = b.BestallningID "
                    + "JOIN SpecialProdukt sp ON oi.SpecialProduktID = sp.SpecialProduktID "
                    + "WHERE b.Status = 'Levererad'";

            if (ID != null) {
                fraga += " AND sp.SpecialProduktID = " + ID;
            }

            if (fran != null && till != null) {
                fraga += " AND b.Datum >= '" + fran + "' AND b.Datum <= '" + till + "'";
            } else if ((fran != null && till == null) || (fran == null && till != null)) {
                JOptionPane.showMessageDialog(this, "Fyll i både Från- och Till-datum om du vill söka på datum.");
                return;
            }

            List<HashMap<String, String>> resultat = idb.fetchRows(fraga);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Rensa tabellen

            if (resultat != null && !resultat.isEmpty()) {
                int totalAntal = 0;
                double totalPris = 0;

                for (HashMap<String, String> rad : resultat) {
                    int antal = Integer.parseInt(rad.get("AntalProdukter"));
                    double pris = Double.parseDouble(rad.get("Pris"));

                    totalAntal += antal;
                    totalPris += pris * antal;
                }

                String datumText = (fran != null && till != null)
                        ? "Från: " + fran + " till " + till
                        : "";

                model.addRow(new Object[]{
                    (ID == null) ? "Alla specialprodukter" : ID,
                    String.format("Totalt pris: %.2f kr", totalPris),
                    totalAntal,
                    datumText
                });

            } else {
                JOptionPane.showMessageDialog(this, "Inga levererade ordrar hittades för produkten.");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid summering: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSummeraActionPerformed

    private void btnFiltreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltreraActionPerformed
        String input = txtHatt.getText().trim();
        Integer ID = null;

        //Försök tolka ID om något har skrivits in
        if (!input.isEmpty()) {
            try {
                ID = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID måste vara ett heltal.");
                return;
            }
        }

        java.sql.Date fran = (java.sql.Date) datePickerFran.getModel().getValue();
        java.sql.Date till = (java.sql.Date) datePickerTill.getModel().getValue();

        try {
            String fraga = "SELECT sp.SpecialProduktID AS ID, sp.Pris AS Pris, oi.AntalProdukter AS Antal, b.Datum AS Datum "
                    + "FROM OrderItem oi "
                    + "JOIN Bestallning b ON oi.BestallningID = b.BestallningID "
                    + "JOIN SpecialProdukt sp ON oi.SpecialProduktID = sp.SpecialProduktID "
                    + "WHERE b.Status = 'Levererad'";

            if (ID != null) {
                fraga += " AND sp.SpecialProduktID = " + ID;
            }

            if (fran != null && till != null) {
                fraga += " AND b.Datum >= '" + fran + "' AND b.Datum <= '" + till + "'";
            } else if ((fran != null && till == null) || (fran == null && till != null)) {
                JOptionPane.showMessageDialog(this, "Fyll i både Från- och Till-datum om du vill filtrera på datum.");
                return;
            }

            List<HashMap<String, String>> resultat = idb.fetchRows(fraga);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Rensa tabellen

            if (resultat != null && !resultat.isEmpty()) {
                for (HashMap<String, String> rad : resultat) {
                    model.addRow(new Object[]{
                        rad.get("SpecialProduktID"),
                        rad.get("Pris"),
                        rad.get("AntalProdukter"),
                        rad.get("Datum")
                    });
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inga resultat hittades.");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid sökning: " + e.getMessage());
        }
    }//GEN-LAST:event_btnFiltreraActionPerformed

    private void btnRensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaActionPerformed
        // Återställ tabellen
        visaLevereradeStandardhattar();

        // Töm datumväljare
        datePickerFran.getModel().setValue(null);
        datePickerTill.getModel().setValue(null);

        // Töm textfält
        txtHatt.setText("");
    }//GEN-LAST:event_btnRensaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFiltrera;
    private javax.swing.JButton btnRensa;
    private javax.swing.JButton btnSummera;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panDatumFran;
    private javax.swing.JPanel panDatumTill;
    private javax.swing.JTextField txtHatt;
    // End of variables declaration//GEN-END:variables
}
