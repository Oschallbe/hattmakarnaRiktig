/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hattmakarna;
import oru.inf.InfDB;
import oru.inf.InfException; 
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author iftinserar
 */
public class SkapaNyFraktsedel extends javax.swing.JPanel {
    private InfDB idb; 
    private String inloggadAnvandare; 

    /**
     * Creates new form SkapaNyFraktsedel
     */
    public SkapaNyFraktsedel(InfDB idb, String inloggadAnvandare) {
      this.inloggadAnvandare = inloggadAnvandare;
      this.idb = idb;
      initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBestallningID = new javax.swing.JTextField();
        btnSkapaFraktsedel = new javax.swing.JButton();
        btnHamta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBestallningInfo = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Skapa ny fraktsedel");

        jLabel2.setText("Ordernummer");

        btnSkapaFraktsedel.setText("Skapa");
        btnSkapaFraktsedel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkapaFraktsedelActionPerformed(evt);
            }
        });

        btnHamta.setText("Hämta");
        btnHamta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHamtaActionPerformed(evt);
            }
        });

        tblBestallningInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblBestallningInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSkapaFraktsedel)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtBestallningID, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnHamta)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBestallningID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHamta))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnSkapaFraktsedel)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnHamtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHamtaActionPerformed
        String bestallningID = txtBestallningID.getText().trim();

    if (bestallningID.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ange ett beställnings-ID.");
        return;
    }

    try {
        // Hämta alla produkter i beställningen
        String sql = "SELECT p.Namn, br.Antal, br.Pris FROM Bestallningsrad br " +
                     "JOIN Produkt p ON br.ProduktID = p.ProduktID " +
                     "WHERE br.BestallningID = " + bestallningID + ";";

        ArrayList<HashMap<String, String>> produkter = idb.fetchRows(sql);

        String[] kolumner = {"Produkt", "Antal", "Pris"};
        DefaultTableModel modell = new DefaultTableModel(kolumner, 0);

        for (HashMap<String, String> rad : produkter) {
            String namn = rad.get("Namn");
            String antal = rad.get("Antal");
            String pris = rad.get("Pris");

            Object[] radData = {namn, antal, pris};
            modell.addRow(radData);
        }

        tblBestallningInfo.setModel(modell);
    } catch (InfException ex) {
        JOptionPane.showMessageDialog(this, "Fel vid hämtning: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnHamtaActionPerformed

    private void btnSkapaFraktsedelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkapaFraktsedelActionPerformed
         String bestallningID = txtBestallningID.getText().trim();
    if (bestallningID.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ange ett beställnings-ID.");
        return;
    }

    try {
        // Hämta kundinfo
        String kundIDsql = "SELECT KundID, Totalpris, Datum FROM Bestallning WHERE BestallningID = " + bestallningID;
        HashMap<String, String> bestallningData = idb.fetchRow(kundIDsql);
        String kundID = bestallningData.get("KundID");
        String datum = bestallningData.get("Datum");
        double totalpris = Double.parseDouble(bestallningData.get("Totalpris"));

        String kundsql = "SELECT * FROM Kund WHERE KundID = " + kundID;
        HashMap<String, String> kundInfo = idb.fetchRow(kundsql);

        // Samla info till fraktsedel
        String adress = kundInfo.get("LeveransAdress");
        String mottagare = kundInfo.get("Fornamn") + " " + kundInfo.get("Efternamn");
        String avsandare = "Hattmakarna AB";
        String innehall = ""; // bygger nedan
        String exportkod = "SE-EU";
        double moms = totalpris * 0.25;
        double prisInklMoms = totalpris + moms;

        // Räkna ut vikt + innehåll
        String produktSQL = "SELECT p.Namn, br.Antal FROM Bestallningsrad br JOIN Produkt p ON br.ProduktID = p.ProduktID WHERE br.BestallningID = " + bestallningID;
        ArrayList<HashMap<String, String>> rader = idb.fetchRows(produktSQL);

        double vikt = 0;
        ArrayList<String> innehallsLista = new ArrayList<>();

        for (HashMap<String, String> rad : rader) {
            int antal = Integer.parseInt(rad.get("Antal"));
            innehallsLista.add(antal + "x " + rad.get("Namn"));
            vikt += 0.5 * antal;
        }

        innehall = String.join(", ", innehallsLista);

        // Skapa fraktsedel i DB
        String fraktSQL = String.format(
            "INSERT INTO Fraktsedel (Adress, Avsandare, Mottagare, Innehåll, Exportkod, Pris, Datum, Vikt, Moms, PrisInklMoms) " +
            "VALUES ('%s', '%s', '%s', '%s', '%s', %.2f, '%s', %.2f, %.2f, %.2f)",
            adress, avsandare, mottagare, innehall, exportkod,
            totalpris, datum, vikt, moms, prisInklMoms
        );

        idb.insert(fraktSQL);
        String fraktsedelID = idb.getAutoIncrement("Fraktsedel", "FraktsedelID");

        // Koppla till beställning
        String kopplaSQL = "UPDATE Bestallning SET FraktsedelID = " + fraktsedelID + " WHERE BestallningID = " + bestallningID;
        idb.update(kopplaSQL);

        JOptionPane.showMessageDialog(this, "Fraktsedel skapad! ID: " + fraktsedelID);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Fel vid skapande: " + e.getMessage());
    }
    }//GEN-LAST:event_btnSkapaFraktsedelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHamta;
    private javax.swing.JButton btnSkapaFraktsedel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBestallningInfo;
    private javax.swing.JTextField txtBestallningID;
    // End of variables declaration//GEN-END:variables
}
